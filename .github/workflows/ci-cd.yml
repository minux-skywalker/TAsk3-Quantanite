name: CI-CD-Pipeline

on:
  push:
    branches: [main]

env:
  DOCKER_REGISTRY: registry.example.com/aiapp
  BACKEND_IMAGE: registry.example.com/aiapp/backend:${{ github.sha }}
  FRONTEND_IMAGE: registry.example.com/aiapp/frontend:${{ github.sha }}
  K8S_DIR: k8s/

jobs:

  checkout:
    runs-on: ubuntu-latest
    outputs:
      sha: ${{ steps.get_sha.outputs.sha }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

  lint-test:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: actions/checkout@v4

      - name: Lint Backend with flake8 (Ignore W391)
        run: |
          pip install flake8
          flake8 backend/ --ignore=W391

      - name: Lint Frontend with ESLint
        run: |
          cd frontend
          npm ci
          npx eslint src/

      - name: Test Backend with pytest
        run: |
          pip install -r backend/requirements.txt
          pytest backend/tests

      - name: Test Frontend with Jest
        run: |
          cd frontend
          npm test

  build-push:
    runs-on: ubuntu-latest
    needs: lint-test
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Registry
        uses: docker/login-action@v3
        with:
          registry: registry.example.com
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}

      - name: Build and Push Backend Image
        run: |
          docker build -t $BACKEND_IMAGE ./backend
          docker push $BACKEND_IMAGE

      - name: Build and Push Frontend Image
        run: |
          docker build -t $FRONTEND_IMAGE ./frontend
          docker push $FRONTEND_IMAGE

      - name: Scan for Vulnerabilities (Trivy)
        run: |
          curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh
          ./trivy image --exit-code 1 --severity CRITICAL $BACKEND_IMAGE || exit 1
          ./trivy image --exit-code 1 --severity CRITICAL $FRONTEND_IMAGE || exit 1

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-push
    steps:
      - uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Authenticate with K8s cluster
        run: echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Replace image placeholders in manifests
        run: |
          sed -i "s|REPLACE_ME|$BACKEND_IMAGE|" ${K8S_DIR}/deployment.yaml
          sed -i "s|REPLACE_ME|$FRONTEND_IMAGE|" ${K8S_DIR}/deployment.yaml

      - name: Apply Kubernetes manifests to staging
        run: kubectl apply -n staging -f ${K8S_DIR}/

      - name: Wait for backend to be ready
        run: |
          kubectl rollout status deployment/backend -n staging --timeout=120s || (kubectl rollout undo deployment/backend -n staging && exit 1)

      - name: Wait for frontend to be ready
        run: |
          kubectl rollout status deployment/frontend -n staging --timeout=120s || (kubectl rollout undo deployment/frontend -n staging && exit 1)

  approve-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment:
      name: production
      url: https://your-prod-url.com
    steps:
      - name: Await manual approval before deploying to production
        run: echo "Approved!"
        # Manual approval handled via GitHub Environment protection rules

  deploy-production:
    runs-on: ubuntu-latest
    needs: approve-production
    steps:
      - uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Authenticate with K8s cluster
        run: echo "${{ secrets.KUBE_CONFIG }}" > kubeconfig.yaml
        env:
          KUBECONFIG: ./kubeconfig.yaml

      - name: Replace image placeholders in manifests
        run: |
          sed -i "s|REPLACE_ME|$BACKEND_IMAGE|" ${K8S_DIR}/deployment.yaml
          sed -i "s|REPLACE_ME|$FRONTEND_IMAGE|" ${K8S_DIR}/deployment.yaml

      - name: Apply Kubernetes manifests to production
        run: kubectl apply -n production -f ${K8S_DIR}/

      - name: Wait for backend rollout
        run: |
          kubectl rollout status deployment/backend -n production --timeout=120s || (kubectl rollout undo deployment/backend -n production && exit 1)

      - name: Wait for frontend rollout
        run: |
          kubectl rollout status deployment/frontend -n production --timeout=120s || (kubectl rollout undo deployment/frontend -n production && exit 1)

  cleanup-images:
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Docker Image Cleanup (pseudo)
        run: |
          echo "This is a placeholder. Use registry API or cronjob to delete images older than 30 days."
